import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';

// Centralized router
import 'core/routing/app_router.dart';

import 'firebase_options.dart'; // generated by flutterfire configure

// Your screens (adjust paths if needed)
// Screen imports moved to app_router.dart to keep main.dart lean.

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  FirebaseFirestore.instance.settings =
      const Settings(persistenceEnabled: true);

  final authNotifier = AuthStateNotifier(); // public type now
  runApp(App(authListenable: authNotifier));
}

/// Public notifier so it doesn't violate 'library_private_types_in_public_api'
class AuthStateNotifier extends ChangeNotifier {
  late final Stream<User?> _authStream;
  StreamSubscription<DocumentSnapshot<Map<String, dynamic>>>? _userDocSub;
  String? role; // cached role for sync redirect checks

  AuthStateNotifier() {
    _authStream = FirebaseAuth.instance.authStateChanges();
    _authStream.listen((user) {
      _userDocSub?.cancel();
      role = null;
      if (user != null) {
        _userDocSub = FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .snapshots()
            .listen((snap) {
          role = (snap.data()?['role'] as String?) ?? 'technician';
          notifyListeners();
        });
      }
      notifyListeners();
    });
  }

  @override
  void dispose() {
    _userDocSub?.cancel();
    super.dispose();
  }
}

class App extends StatefulWidget {
  final AuthStateNotifier authListenable;
  const App({super.key, required this.authListenable});
  @override State<App> createState() => _AppState();
}

class _AppState extends State<App> {
  late final AppRouter _appRouter = AppRouter(authListenable: widget.authListenable);
  @override
  Widget build(BuildContext context) => MaterialApp.router(
    title: 'Preventive Maintenance',
    debugShowCheckedModeBanner: false,
    theme: ThemeData(
      useMaterial3: true,
      colorSchemeSeed: const Color(0xFF1D4ED8),
      brightness: Brightness.light,
    ),
    routerConfig: _appRouter.router,
  );
}

// Role gate, shells & stub widgets moved to app_router.dart
